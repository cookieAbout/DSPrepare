from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from LLM.llm_florist import LLMAgent
from bot.keyboards import get_main_keyboard


# from database.session import get_db


class DescriptionState(StatesGroup):
    waiting_for_description = State()
    confirming = State()


async def cmd_start(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ü–≤–µ—Ç—ã –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –µ—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                         reply_markup=get_main_keyboard()
                         )


async def cmd_help(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ‚ÑπÔ∏è –ü–æ–º–æ—â—å """
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /history - –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª
    /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    /not_found - –∑–∞–≤–µ—Ä—à–∏—Ç—å, –µ—Å–ª–∏ —Ü–≤–µ—Ç–æ–∫ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (–∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –±—É–¥—É—â–µ–º)
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())


async def cmd_add_descriptions(message: types.Message):
    await DescriptionState.waiting_for_description.set()
    await message.answer("–í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:")


async def cmd_llm_answer(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã üîç –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ """
    agent = LLMAgent()
    try:
        response = await agent.get_llm_answer_with_memory(message.text)
        async with state.proxy() as data:
            data['description'] = message.text
            data['enriched'] = response

        await DescriptionState.confirming.set()
        await message.answer(response.content, reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def cmd_confirm_description(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–∫–∞ """
    if message.text == "–î–∞, —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ!":
        await message.answer(f"–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!")
        await state.finish()

    else:
        await DescriptionState.waiting_for_description.set()
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:")


async def cmd_not_found(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /not_found """
    await message.answer('–Ø —Å–æ—Ö—Ä–∞–Ω—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–¥—É–º–∞—é –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏', reply_markup=get_main_keyboard())
    await state.finish()
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_message_handler(cmd_help, lambda msg: msg.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    dp.register_message_handler(cmd_add_descriptions, lambda msg: msg.text == "üîç –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞")
    dp.register_message_handler(cmd_llm_answer, state=DescriptionState.waiting_for_description)
    dp.register_message_handler(
        cmd_confirm_description,
        lambda msg: msg.text in ['–î–∞, —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ!', '–ù–µ —Ç–æ'],
        state=DescriptionState.confirming
    )
    dp.register_message_handler(cmd_not_found, lambda msg: msg.text == "–¢–∞–∫ –∏ –Ω–µ –Ω–∞—à–µ–ª. –í—ã–π—Ç–∏.")
